# GCP プロジェクトを選択
gcloud config set project polar-xxxxxx

# API 有効化
gcloud services enable run.googleapis.com artifactregistry.googleapis.com pubsub.googleapis.com cloudscheduler.googleapis.com

🔹 ステップ 2. Artifact Registry リポジトリ作成（まだない場合）

gcloud artifacts repositories create my-docker-repo --repository-format=docker --location=asia-northeast1 --description="Docker repo for Cloud Run service"

「1,py.pandas将来エラー→ ser[0] のように書いている部分を ser.iloc[0] に修正すれば警告は消えます。
2,Flask の警告

WARNING: This is a development server. Do not use it in a production deployment.


Cloud Run 上で flask run を直接起動しているために出ています。
これは料金には影響しませんが、本番環境向けには Gunicorn 等を使うべきと Flask が警告しているだけです。
→ Dockerfile を修正して gunicorn -b :8080 getDevAndPop:app のようにするのが推奨です。
3,無駄なインスタンス起動の可能性
Cloud Run は「リクエストが来たときに自動で起動 → 一定時間待機 → 停止」する仕組みです。

複数回エラーやリトライが発生すると、そのたびにインスタンスが立ち上がり 料金が余計にかかる可能性 があります。

特に Pub/Sub Push 型は「処理が 200 を返さない」と再試行 → 無限に呼ばれることもあります。

→ 解決策:

コードで例外を握りつぶさず、確実に return "OK", 200 を返すようにする。

エラーで処理不能な場合は Dead Letter Queue (DLQ) に送る設定をしておく。
再pandas 警告修正

# NG: Series.__getitem__（警告）
array = [numAndUrl[0]]

# OK: iloc を明示
array = [numAndUrl.iloc[0]]


→ 将来のエラー化を避ける + 警告ログ削減。

Gunicorn で本番運用
Dockerfile の CMD を以下に変更：

CMD exec gunicorn --bind :8080 --workers 1 --threads 8 getDevAndPop:app


→ Flask 開発サーバの警告解消 + メモリ管理改善。

メモリ制御

Cloud Run のメモリを一時的に 2GB に増加（課金は少し上がる）。

そのうえで、Playwright のブラウザインスタンスを毎回新規に作るのではなく 処理後に明示的に browser.close() するよう修正。

browser = p.chromium.launch()
page = browser.new_page()
page.goto(numAndUrl.iloc[1], wait_until="domcontentloaded")
# ... 処理 ...
browser.close()  # ← これを必ず実行


Pub/Sub の Dead Letter Queue (DLQ) 設定

メモリ落ちなどで 200 を返せない場合、無限リトライせずに 別トピック（例: my-dead-letter-topic）に転送する。

そこで失敗メッセージを検証できるので「料金爆発」を防げる。」

3. Docker イメージのビルド & Cloud Build で push
gcloud builds submit --tag asia-northeast1-docker.pkg.dev/polar-xxxxxx/my-docker-repo/my-service

4. Cloud Run にデプロイ
gcloud run deploy my-service --image asia-northeast1-docker.pkg.dev/polar-xxxxxx/my-docker-repo/my-service:latest --region asia-northeast1
 (--no-allow-unauthenticated)変更の必要あり（このままだと外部htmlリクエストを受けつけてしまう）

(以下文章そのまま、shellで実行
# プロジェクトIDを環境変数にセット
PROJECT_ID=$(gcloud config get-value project)

# Cloud Run サービスアカウントを変数にセット
SERVICE_ACCOUNT=$(gcloud run services describe my-service \
  --region=asia-northeast1 \
  --format='value(spec.template.spec.serviceAccountName)')

# Cloud Storage バケットへのアクセス権を付与
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member=serviceAccount:$SERVICE_ACCOUNT \
  --role=roles/storage.objectAdmin
以上文章そのまま）

＃A「必要な設定まとめ（<> を埋める箇所付き）
① プロジェクト番号を取得
PROJECT_ID=polar-xxxxxx
PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")

② Pub/Sub トピック作成
gcloud pubsub topics create my-topic   # 例: my-topic
